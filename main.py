import textrank
import googlescraper
import wikipediaminer

# text = "I look at inheritance so we'll take the early example where we take the person class and then in here deck and create a sub class called the student class. The student class will have the student ID and the GPA as special properties, the name and movie number but they are already in the class. So in this section we will look at how to use the super keyword How to use the protected keyword overriding overloading creating objects and also creating objects with the same base class. So initially, let me try to get the person class code over here. So I just copy paste it. So this is the code that I wrote a little while ago. Now I want to create a new class called student. The student class has the name and mobile number but it also has student ID and GPS student ID. Let us take it as a number and GPA will take it as a floating point number. So this will be an integer and this will be a floating point number. So let's try to create a student class. We can say a class to that I want to say that dissident class extends the person class. So this is the key word that we use and when you do that, everything that is the end person class is now available in the student class. Now we have to do 1 voting. Now if you try to keep this property is private, you can't actually access them even in a subclass. So typically when you do inheritance, you have to change your properties into protective. Let me do that. So protect. It is very similar to private. You can't access this properties from the main function but you can access them from a subclass probably but you can't even access them from her subclass That's why we convert all the attributes into protected when we use inheritance. Right. So once we have 1 up, you can add the new properties so this can be private protected depending on what you want to take. It is. So anyway use protected. So you would do is protected in the sense that you're assuming that this class also will be extended will be inherited. So the first 1 that I'm going to have is for the client ID I use an integer for that. The second 1 I'm going to have is the GPA. Okay. That's right. Construct for this. We write the default constructor. So this issue that I want to do a default value for the GP as 2 point 0. So it's a floating point number. So I will write as well as to write the old construction. So a public student. So here I have to get the Let's try to see what are the different values that we have over here. We have mobile number name so I did a certain ID fast then maybe the name that's from the Super class also I'll get the by number and then finally P. So that's going to be my older constructor. Now if I look at the person class see the person class I'm actually handling the name and the mobile number. So I don't need to repeat this I don't need to repeat this assignment. So what I can do is I can call the superclass overlay constructed in Java. You can do this by colleges using the super keyword then I can pass the 2 parameters name and mobile number. So when I do that, the super class of the student plans is personal. So we we asked these 2 values to the old constructor that matches that to the parameter and name will go to the property name by number We Go to the property or by number now I only have to handle the specific properties of the student class. So let me use the student ID property and a sign it through an ID and I will also handle the GPA. So this is basically how I can write my default and all are constructed. This is basically how you can write the gates and sites. It's just like earlier. So I have a gate for student ID so it should be of the indie type. Then it is always wide and for GP of course. Now this is a little bit of a problem. They should be flat that should do it write. The disclaimer This is the disclaimer that I have so I want to write this. So this has name and mobile number I want to add the the details so I can override this by you writing it second. See I am out in line. Let me try to do this. Let me try to actually only handle the values which are not done here. So I can see student ID this student ID is not there and let me also have the GPA and then have the GPS. Well now let's assume in this example I want to make use of the this remitted over here. So this is the super class display. So in fact I can actually do this so I can see super dot display. This will actually call the display method in the Super class straight to create some objects in a so here we have the main program where we can do this. So I think there's a small error here. This should be bye number. So let's create an object student object making use of this over the constant to be a prudent ID name, mobile number and GPA sent ID name mobile lamb GPS so let's create it over here. I'll define the variable or object and here I can actually declare it. So let's say the numbers hundred and the name is it and the mobile number is not 7 8. Some number that is and a GPA is trying to I'll use F for floating point number and let me try to display a detail. Now when I call this what should happen is like I should call the overloaded constructor in the older constructed. You can see very clearly it. First of all handles the name and mobile number by calling the super class constructor. So the Super classes student is person and basically the parameters are stored under the properties subsequently it handles the GPA and is ready now when you call the display meted this is what it's going to be called and he also be calling the super passes I don't need to always do this but in this example I am trying to call the super class display. So in here it brings the name and the mobile number after doing that it comes here and I can then print the GPA and the current it. So let's run this code. You can see it trains data, those details and it also Prince a certain ID as well as the GP when we wrote the 2 constructors We saw this example of overloading overloading is situation where you want to have either constructor or maybe a method with the same name but with different parameters so you can see this is the default construct and this is the old or the constructor you can do this for a method as well. On the other hand, this is an example of overriding It's called overriding because the super class of the student as I also had distributed so there's disclaimed industry and classes where person classes were. So this is actually overloaded I override method. So this is overriding. So we have overridden, they disclaimed after person class now I want to write and you method for the student class. Let's call it this, take a you know you get your degree class based on the GPA. So I'll have a simple if condition. So if your GPA is less than let's see 3 you get a pass. So we make it very simple. So if you have to you about then you have a class like first class or second up a second lower 1 of those. This is strictly not true. You need to have the water GPA but for our purposes is fine. So we'll just check this value as well. So data has a GPS 3 point 2. So let us try to display class as well. The rest and this code. So it says here you have graduated with a class this actually because she has a GPA above 3 you out to the Dales condition is true. Things that you can do when you have inheritance is that you can have this kind of relationship. So if you have a super class right? So let's say this is super class called X. You can obviously create objects are diaper class. This is obvious. Right. But another interesting thing that you can do is you can also create objects of subclasses. So if you have a super class, you can have a variable by a that can actually contain a subclass object. So let's try to see this in practice. So I could actually theoretically have a person type are all peace but to this I can assign a student type object. That's because person is a super class. So let me create someone else by a user or 4 numbers. So then I could display Let's run this code as we so you can see it prints normal is details. So although P is of the person type when it calls the display meted it was the correct 1 but I think is going to happen if I were to say display class. Now this class is this method it is only available in Stein class. It's not available in the percent class. This see what happens. Now you have any re now the error comes because P is of the type person and as far as the person class is concerned, there is no such method called display class. This is something specific to the silent class. So when you have objects of a super class, you can obviously only call methods which are available in that class. Only if your subclass has some specific methods, then you cannot call it. But let's say you want to do this, you want to actually call this. How can we do that? So 1 of the things that you need to realize is although is of the type person P is actually referring to a full blown student object. In fact, everything that is the in student is available on the P is this that you cannot access it to the person because it's associated with the person class. So 1 thing I can do is I could have maybe a student object call it right and make it equal to p. Now you can't do this, you'll get a compilation are once again the objective is like I want to kind of assign person object to a student and then display it probably this will give me an error because it doesn't know how to do this. But because peace of the person takes but I could say Okay all the pieces of the person type I want to look at it as a student. So you can actually do this kind of casting. So if you run this code, you can see this example, we can actually figure out what is the class that normally has got now. The general relationship is like this. So if you want to do casting the way generally works, you see who have a subclass right? You can cast it with this AP class Type and this 1 can be a super class very but I just tried it to inscribe it. So here is a very good example of that the the subclasses student and I'm casting a super class variable object to that. So these are some common things that you have. You probably would have seen this in less as well. It's generally common in most objectoriented languages."
#
# stage1 = list()
#
# for graf in textrank.parse_doc(text):
#     stage1.append(textrank.pretty_print(graf._asdict()))
#
# graph, ranks = textrank.text_rank(stage1)
# textrank.render_ranks(graph, ranks)
#
# key_phrases = textrank.normalize_key_phrases(stage1, ranks)
#
# keyword = next(key_phrases).text
#
# for phrases in key_phrases:
#     print(phrases)
#
# links = list()

# print(googlescraper.getUrls(keyword))

# for serp in googlescraper.getUrls(keyword):
#     print(serp)
#     for link in serp.links:
#         # print(link.title)
#         # links.append(link)
#         pageTitle = str(link.title)[:-12]
#         if pageTitle:
#             links.append(pageTitle)

# print(links)

links = ["C++ classes"]

# print(wikipediaminer.mine_wiki_articles(links[:3]))
print(wikipediaminer.mine_wiki_articles(links[:3]))
